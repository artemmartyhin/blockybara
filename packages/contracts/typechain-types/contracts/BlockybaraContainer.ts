/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export type PermissionStruct = { publicKey: BytesLike; signature: BytesLike };

export type PermissionStructOutput = [publicKey: string, signature: string] & {
  publicKey: string;
  signature: string;
};

export type InEuint128Struct = { data: BytesLike; securityZone: BigNumberish };

export type InEuint128StructOutput = [data: string, securityZone: bigint] & {
  data: string;
  securityZone: bigint;
};

export interface BlockybaraContainerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "access"
      | "accessBatch"
      | "blobs"
      | "count"
      | "eip712Domain"
      | "fetch"
      | "fetchAll"
      | "owner"
      | "permissions"
      | "permit"
      | "remove"
      | "renounceOwnership"
      | "transferOwnership"
      | "write"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "OwnershipTransferred"
      | "PermissionChanged"
      | "RemoveBlob"
      | "WriteBlob"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "access",
    values: [BigNumberish, PermissionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "accessBatch",
    values: [BigNumberish[], PermissionStruct]
  ): string;
  encodeFunctionData(functionFragment: "blobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fetch", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "fetchAll", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "write",
    values: [BytesLike[], InEuint128Struct[]]
  ): string;

  decodeFunctionResult(functionFragment: "access", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accessBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "write", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionChangedEvent {
  export type InputTuple = [user: AddressLike, permission: boolean];
  export type OutputTuple = [user: string, permission: boolean];
  export interface OutputObject {
    user: string;
    permission: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveBlobEvent {
  export type InputTuple = [entry: BytesLike, key: BigNumberish];
  export type OutputTuple = [entry: string, key: bigint];
  export interface OutputObject {
    entry: string;
    key: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WriteBlobEvent {
  export type InputTuple = [entry: BytesLike, key: BigNumberish];
  export type OutputTuple = [entry: string, key: bigint];
  export interface OutputObject {
    entry: string;
    key: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlockybaraContainer extends BaseContract {
  connect(runner?: ContractRunner | null): BlockybaraContainer;
  waitForDeployment(): Promise<this>;

  interface: BlockybaraContainerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  access: TypedContractMethod<
    [id: BigNumberish, perm: PermissionStruct],
    [string],
    "view"
  >;

  accessBatch: TypedContractMethod<
    [ids: BigNumberish[], perm: PermissionStruct],
    [string[]],
    "view"
  >;

  blobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        entry: string;
        key: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  count: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  fetch: TypedContractMethod<[id: BigNumberish], [string], "view">;

  fetchAll: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  permissions: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  permit: TypedContractMethod<
    [user: AddressLike, permission: boolean],
    [void],
    "nonpayable"
  >;

  remove: TypedContractMethod<[ids: BigNumberish[]], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  write: TypedContractMethod<
    [entries: BytesLike[], keys: InEuint128Struct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "access"
  ): TypedContractMethod<
    [id: BigNumberish, perm: PermissionStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "accessBatch"
  ): TypedContractMethod<
    [ids: BigNumberish[], perm: PermissionStruct],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "blobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        entry: string;
        key: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetch"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "fetchAll"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permissions"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [user: AddressLike, permission: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[ids: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "write"
  ): TypedContractMethod<
    [entries: BytesLike[], keys: InEuint128Struct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PermissionChanged"
  ): TypedContractEvent<
    PermissionChangedEvent.InputTuple,
    PermissionChangedEvent.OutputTuple,
    PermissionChangedEvent.OutputObject
  >;
  getEvent(
    key: "RemoveBlob"
  ): TypedContractEvent<
    RemoveBlobEvent.InputTuple,
    RemoveBlobEvent.OutputTuple,
    RemoveBlobEvent.OutputObject
  >;
  getEvent(
    key: "WriteBlob"
  ): TypedContractEvent<
    WriteBlobEvent.InputTuple,
    WriteBlobEvent.OutputTuple,
    WriteBlobEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PermissionChanged(address,bool)": TypedContractEvent<
      PermissionChangedEvent.InputTuple,
      PermissionChangedEvent.OutputTuple,
      PermissionChangedEvent.OutputObject
    >;
    PermissionChanged: TypedContractEvent<
      PermissionChangedEvent.InputTuple,
      PermissionChangedEvent.OutputTuple,
      PermissionChangedEvent.OutputObject
    >;

    "RemoveBlob(bytes32,uint256)": TypedContractEvent<
      RemoveBlobEvent.InputTuple,
      RemoveBlobEvent.OutputTuple,
      RemoveBlobEvent.OutputObject
    >;
    RemoveBlob: TypedContractEvent<
      RemoveBlobEvent.InputTuple,
      RemoveBlobEvent.OutputTuple,
      RemoveBlobEvent.OutputObject
    >;

    "WriteBlob(bytes32,uint256)": TypedContractEvent<
      WriteBlobEvent.InputTuple,
      WriteBlobEvent.OutputTuple,
      WriteBlobEvent.OutputObject
    >;
    WriteBlob: TypedContractEvent<
      WriteBlobEvent.InputTuple,
      WriteBlobEvent.OutputTuple,
      WriteBlobEvent.OutputObject
    >;
  };
}
